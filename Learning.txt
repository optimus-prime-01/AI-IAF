Key differences between npm and pnpm:

Performance: pnpm is significantly faster and more efficient due to its unique disk storage structure
Disk Space: pnpm uses hard links and a content-addressable store, saving disk space by not duplicating packages across projects
Package Management:


npm creates a nested node_modules structure
pnpm creates a flat node_modules structure with symlinks


Dependency Resolution:


npm allows access to dependencies not listed in package.json
pnpm enforces strict dependency rules, preventing access to unlisted packages


Version Control: pnpm's lockfile (pnpm-lock.yaml) is more deterministic than npm's package-lock.json

Both are package managers that will work for most projects, but pnpm offers better performance and disk space usage.

Make sure that the version of tailwindcss and shadcn are same.

Why Must .env.local Be in the Root Directory?
Vite follows a specific order when loading environment variables. It looks for .env files only in the root directory of your project (the same level as vite.config.ts). If your .env.local is inside a subfolder like src/, Vite will not find it.


Protected Routes in React
Protected routes (also called private routes) restrict access to specific pages based on authentication or authorization. Users must meet certain conditions (e.g., be logged in) to access these routes.

ðŸ”¹ How Protected Routes Work
Check Authentication â†’ Before rendering a page, check if the user is logged in.
Redirect If Not Authenticated â†’ If the user isnâ€™t logged in, redirect them to the login page.
Render the Page If Authenticated â†’ If the user is logged in, allow access


The cn function is a helper that helps combine multiple class names into a single string, making it easier to write and manage Tailwind CSS styles dynamically.

TypeScript me interface ye define hota hai ki kis tarah ka data ek component receive karega as a prop.

Firebase configuration refers to the setup details required to initialize and connect your application with Firebase services. This configuration allows your app to use Firebase features such as authentication, Firestore database, storage, and messaging.

This AuthHandler component handles user authentication and stores user data in Firestore when they sign in. It integrates Firebase Firestore, Clerk Authentication, and React Router.

ðŸ“Œ Key Features
Checks if the user is signed in (isSignedIn)

Uses useAuth() from Clerk to verify authentication.
Uses useUser() to get the current userâ€™s details.
Stores user data in Firestore (storeUserData function)

If the user is authenticated and does not already exist in Firestore, their information is stored.
Uses React Router (useLocation & useNavigate)

Gets the current path (pathname) and navigation function (navigate).
Ensures the effect runs whenever pathname changes.
Handles Loading State (useState)

Displays a LoaderPage component while storing data.


Focus on routing , got stuck while rendering dashboard.tsx

useParams is a React Hook from React Router that helps read values from the URL.

const interviewRef = doc(db, "interviews", interviewID);
ðŸ”¹ This tells Firestore: "I need the document with ID = interviewID from the interviews collection."

const interviewSnap = await getDoc(interviewRef);
ðŸ”¹ This tells Firestore: "Fetch the data from the document I just referenced."

Summary of GEMINI model script:-
Code Section	Purpose
Imports (@google/generative-ai)	Loads Google AI functions and safety settings.
API Key Setup	Retrieves API key securely from environment variables.
Model Initialization	Initializes Gemini AI model (gemini-1.5-flash).
Generation Config	Controls temperature, randomness, and output length.
Safety Filters	Blocks harassment, hate speech, explicit, and dangerous content.
Chat Session Start	Starts a chat session using the AI model.

The onSnapshot method subscribes to the Firestore collection for real-time updates.
Whenever data changes (e.g., an interview is added, removed, or modified), onSnapshot will automatically fetch the updated data and reflect it in the component without needing a manual refresh.

useParams is a React Router hook that allows you to access URL parameters from the current route.